(defun halve (n) (/ n 2))

(defun merge-sort (nums p r)
  (when (< p r)
    (let ((q (+ p (halve (- r p)))))
      (merge-sort nums p q)
      (merge-sort nums (1+ q) r)
      (merge-sort-merge nums p q r))))

(defun merge-sort-merge (nums p q r)
  (let ((tmp (make-vector (1+ (- r p)) 0))
        (i p)
        (j (1+ q))
        (k 0))
    (while (and (<= i q) (<= j r))
      (let ((a (aref nums i))
            (b (aref nums j)))
        (cond ((<= a b)
               (aset tmp k a)
               (cl-incf i))
              (t
               (aset tmp k b)
               (cl-incf j))))
      (cl-incf k))

    (while (<= i q)
      (aset tmp k (aref nums i))
      (cl-incf i)
      (cl-incf k))

    (while (<= j r)
      (aset tmp k (aref nums j))
      (cl-incf j)
      (cl-incf k))

    (setq k 0)
    (while (< k (length tmp))
      (aset nums (+ p k) (aref tmp k))
      (cl-incf k))))

(defun merge-sort-immutable (nums)
  (let ((len (length nums)))
    (if (<= len 1)
        nums
      (let* ((mid (halve len))
             (nums1 (merge-sort-immutable (substring nums 0 mid)))
             (nums2 (merge-sort-immutable (substring nums mid len))))
        (merge-sort-immutable-merge nums1 nums2)))))

(defun merge-sort-immutable-merge (nums1 nums2)
  (let* ((len1 (length nums1))
         (len2 (length nums2))
         (res (make-vector (+ len1 len2) 0))
         (i 0)
         (j 0)
         (k 0))
    (while (and (< i len1) (< j len2))
      (let ((a (aref nums1 i))
            (b (aref nums2 j)))
        (cond ((<= a b)
               (aset res k a)
               (cl-incf i))
              (t
               (aset res k b)
               (cl-incf j))))
      (cl-incf k))

    (while (< i len1)
      (aset res k (aref nums1 i))
      (cl-incf i)
      (cl-incf k))

    (while (< j len2)
      (aset res k (aref nums2 j))
      (cl-incf j)
      (cl-incf k))

    res))

(let* ((nums (vector 11 8 3 9 7 1 2 5))
       (result (merge-sort-immutable nums)))
  (princ result t))
