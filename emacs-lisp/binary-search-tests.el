(require 'ert)
(require 'binary-search)

(ert-deftest binary-search-test ()
  (should (equal (binary-search [] 0) -1))
  (should (equal (binary-search [0] 0) 0))

  (let ((nums [-1 0 3 5 9 12]))
    (should (equal (binary-search nums 9) 4))
    (should (equal (binary-search nums -1) 0))
    (should (equal (binary-search nums 12) 5))
    (should (equal (binary-search nums 99) -1))))

(ert-deftest binsearch-test-find-first ()
  (let ((nums [1 1 2 3 3 3 4 5 5]))
    (should (equal (binsearch-find-first nums 0) -1))
    (should (equal (binsearch-find-first nums 1) 0))
    (should (equal (binsearch-find-first nums 3) 3))
    (should (equal (binsearch-find-first nums 5) 7))
    (should (equal (binsearch-find-first nums 6) -1))))

(ert-deftest binsearch-test-find-first-gte ()
  (let ((nums [1 1 2 3 3 3 4 5 5]))
    (should (equal (binsearch-find-first-gte nums 0) 0))
    (should (equal (binsearch-find-first-gte nums 1) 0))
    (should (equal (binsearch-find-first-gte nums 3) 3))
    (should (equal (binsearch-find-first-gte nums 5) 7))
    (should (equal (binsearch-find-first-gte nums 6) -1))))

(ert-deftest binsearch-test-find-last ()
  (let ((nums [1 1 2 3 3 3 4 5 5]))
    (should (equal (binsearch-find-last nums 0) -1))
    (should (equal (binsearch-find-last nums 1) 1))
    (should (equal (binsearch-find-last nums 3) 5))
    (should (equal (binsearch-find-last nums 5) 8))
    (should (equal (binsearch-find-last nums 6) -1))))

(ert-deftest binsearch-test-find-last-lte ()
  (let ((nums [1 1 2 3 3 3 4 5 5]))
    (should (equal (binsearch-find-last-lte nums 0) -1))
    (should (equal (binsearch-find-last-lte nums 1) 1))
    (should (equal (binsearch-find-last-lte nums 3) 5))
    (should (equal (binsearch-find-last-lte nums 5) 8))
    (should (equal (binsearch-find-last-lte nums 6) 8))))
